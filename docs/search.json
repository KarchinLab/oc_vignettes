[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenCRAVAT Vignettes",
    "section": "",
    "text": "This is a series of vignettes for OpenCRAVAT that show specific tasks.\nThey consist of multimedia content: text, images, and demo videos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>OpenCRAVAT Vignettes</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html",
    "href": "getting_started_web.html",
    "title": "2  Getting Started (Website/GUI)",
    "section": "",
    "text": "2.1 Learning Objectives\nBy the end of this tutorial, you should be able to:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#learning-objectives",
    "href": "getting_started_web.html#learning-objectives",
    "title": "2  Getting Started (Website/GUI)",
    "section": "",
    "text": "Create as user account on the OpenCRAVAT site\nInstall OpenCravat locally using an installer\nSearch for available annotators on the open cravat site\nUpload and annotate variant files on the site\nFilter annotated results for visualization\nVisualize and Summarize Results in OpenCRAVAT\nExport and Share annotation results with others",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#understanding-the-context-for-our-task",
    "href": "getting_started_web.html#understanding-the-context-for-our-task",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.2 Understanding the Context For Our Task",
    "text": "2.2 Understanding the Context For Our Task\nLet’s start with a research question we’re interested in. We have a list of variants that we’ve found in our patient population of interest. Our research question is:\n\nGiven this list of variants, which are potentially pathogenic?\n\nThis research question will take us through understanding how the OpenCRAVAT annotator works.\nTo start, you can either install OpenCRAVAT locally, or create an account on the website. Then you’ll follow the paths below. Here’s a comparison of both approaches:\n\n\n\nFeature\nOpenCRAVAT Web\nOpenCRAVAT Local\n\n\n\n\nCreate Account\nYes on Web\nNot required\n\n\nInstall Annotators\nPre-installed\nInstall in Store\n\n\nScriptable\nNo\nYes\n\n\nProtected Data\nNo\nYes, with appropriate protections\n\n\n\nMost importantly, if you are using protected data, you should go the local installer route, with appropriate protections on your machine.\nYou can click on each box in the diagram below to go to the relevant section. We’ll have an appropriate callout to highlight the differences where the two approaches differ.\n\n\n\n\n\nflowchart TD\n    L[Creating an OpenCRAVAT Account] --&gt; A\n    click L \"#creating-an-opencravat-account-web\"\n    M[Installing OpenCRAVAT via Installer] --&gt; N\n    N[\"Install Annotators\"] --&gt; B\n    click M \"#installing-opencravat-via-installer-local\"\n    click N \"#install-annotators-local\"\n    A[Browse and select annotators] --&gt; B[Convert to Input File Format]\n    click A \"#browse-annotators-web\"\n    click B \"#convert-to-input-file-format\"\n    B --&gt;|Variant File Input| C[Submit Annotation Job]\n    click C \"#submit-annotation-job\"\n    C --&gt;|Results|D[\"Filter Results\"] --&gt; E[Visualize Results]\n    click D \"#filter-results\"\n    click E \"#visualize-results\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#creating-an-opencravat-account-web",
    "href": "getting_started_web.html#creating-an-opencravat-account-web",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.3 Creating an OpenCRAVAT Account (Web)",
    "text": "2.3 Creating an OpenCRAVAT Account (Web)\nLet’s start out by creating an account on https://run.opencravat.org. If your organization is running OpenCRAVAT locally, you will need to find out the appropriate URL for the instance of OpenCRAVAT.\nHere’s the initial screen we’ll see when we go to https://run.opencravat.org. You’ll click on the Sign Up Button to create an account.\n Enter your details in the form, and sign up. You’ll automatically be signed into the interface and will be ready to go for the next step.\n\nNow you’re ready to browse the OpenCRAVAT Store to look for annotators.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#installing-opencravat-via-installer-local",
    "href": "getting_started_web.html#installing-opencravat-via-installer-local",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.4 Installing OpenCRAVAT Via Installer (Local)",
    "text": "2.4 Installing OpenCRAVAT Via Installer (Local)\nYou can install OpenCRAVAT via the installers below:\n\n2.4.1 Windows\nWindows installer\nWindows Defender may indicate that it prevented an unknown application from running. If so, click the ‘More’ link on the message and then select ‘Run Anyway’. An “OpenCRAVAT” icon will be created on the Desktop and the Start Menu.\n\n\n2.4.2 MacOS\n\nMac OS installer\nRight-click the downloaded file and select “Open”. Your Mac may ask you to confirm stating that the file was not downloaded from the App Store. Click “Open” button. Just double-clicking the installer may not enable this “Open” option.\n\n\n2.4.3 Linux\nLinux Users should refer to the Command Line Quickstart to install via pip/pip3.\n\n\n2.4.4 Start OpenCRAVAT GUI\n\nNow that OpenCRAVAT is installed, we can run the GUI. In a command prompt (PowerShell or Terminal), you can start the OpenCRAVAT GUI by typing:\noc gui\nIn MacOS, you can also launch OpenCRAVAT via clicking on the application in your Applications folder. In Windows, you can click the desktop Icon to launch it.\nYou should see the following in your terminal:\ntedladeras@teds-MacBook-Pro ~ % oc gui\n\n   ____                   __________  ___ _    _____  ______\n  / __ \\____  ___  ____  / ____/ __ \\/   | |  / /   |/_  __/\n / / / / __ \\/ _ \\/ __ \\/ /   / /_/ / /| | | / / /| | / /   \n/ /_/ / /_/ /  __/ / / / /___/ _, _/ ___ | |/ / ___ |/ /    \n\\____/ .___/\\___/_/ /_/\\____/_/ |_/_/  |_|___/_/  |_/_/     \n    /_/                                                     \n\nOpenCRAVAT is served at localhost:8080\n(To quit: Press Ctrl-C or Ctrl-Break if run on a Terminal or Windows, or click \"Cancel\" and then \"Quit\" if run through OpenCRAVAT app on Mac OS)\n(Getting result of [example_input.sqlite]:[variant]...)\nDone getting result of [example_input.sqlite][variant] in 0.029s\n(Getting result of [example_input.sqlite]:[gene]...)\nDone getting result of [example_input.sqlite][gene] in 0.021s\nA window should open in your web browser. If not, enter https://localhost:8080 to view the GUI.\nNow you can browse and install the available annotators",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#browse-annotators-web",
    "href": "getting_started_web.html#browse-annotators-web",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.5 Browse Annotators (Web)",
    "text": "2.5 Browse Annotators (Web)\n\nIf we click on the STORE tab in the top left of the interface, we’ll see the variety of annotators that are available to us.\n\nLet’s browse the clinically relevant annotators by clicking on the Clinically Relevant checkbox:\n\nAs we browse the annotators available to us, we notice two specific annotators we want to work with. Let’s use two clinically relevant annotators: CiViC (Clinical Interpretations of Variants in Cancer) and ClinVar, a public archive of interpretations of clinically relevant patients.\nTo get more information, click on the CiViC box:\n And you’ll see more information about the annotator:\n\n\n\n\n\n\n\nFor Local Users\n\n\n\nIf you have installed OpenCRAVAT locally, you will have the option to install annotators on the store page. You can do this by clicking “Install” for the annotator of interest. Please note that some of the annotators use a lot of disk space, so keep that in mind before installing locally.\n\nYou already have CiViC and ClinVar installed by default, so you don’t need to install them locally.\n\n\nNow we know which annotators we want to use, let’s review input file formats.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#convert-to-input-file-format",
    "href": "getting_started_web.html#convert-to-input-file-format",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.6 Convert to Input File Format",
    "text": "2.6 Convert to Input File Format\nOpenCRAVAT supports VCF files for input, but also has a simplified format to be used for input files.\nWe’ll use an example and annotate it. Let’s take a look at the first few lines of this file to understand the input format. This example is available by clicking the “TSV” button next to “example”:\n\nchr1    69091   +   A   C   s0\nchr1    69091   +   ATG C   s0\nchr6    31039077    +   C   G   s0\nchr1    27612918    +   G   a   s1\nchr1    27612918    +   G   A   s0\nchrM    235 +   A   G   clinvar\nchrM    3308    +   T   C   omim\nchr8    54626835    +   A   T   s0\nchr4    1804372 +   A   G   s1\nchr4    1804372 +   AT  GC  s1\nchr4    1804372 +   A   T   s1\nchr1    369551  +   G   C   s0\nchr10   121593817   -   A   T   s0\nchr10   2987654 +   T   A   s1\nThis format contains the following columns: chromosome, position, strand, reference, allele, and sample.\nMuch more information about the supported file formats are here: File Formats.\nNow we have our input file, we can move on to submitting our job.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#submit-annotation-job",
    "href": "getting_started_web.html#submit-annotation-job",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.7 Submit Annotation Job",
    "text": "2.7 Submit Annotation Job\n\nBefore we move on, let’s take a look at the overall workflow for annotating in the GUI. We’ll start out by 1) submitting our input file, 2) selecting the annotators, and then 3) submitting our job.\n\n\nLet’s start the workflow. We can now add our variant file to annotate and submit a job. Select the JOBS tab in the top left corner of the interface.\n\n\nOur example file corresponds to the hg19/GRCH37 build, so make sure that this genome is selected under the Genome field\n\nNow we’ll add our input file. Add your variant file here by clicking the “ADD INPUT FILES” button. If you are using the built in example, you won’t need to add it.\n\n\nNow we can select our annotators. Under annotations in the box below “Variants”, click on the “Clinical Relevance” category.\n\n\nSelect the CiViC (not CiViC Gene) and ClinVar annotation checkboxes.\n\n\nNow we’re ready to annotate. Click the ANNOTATE button at the bottom of the webpage. Now you’ve submitted your job.\n\n\nDepending on the size of your Variant file, it may take time for your job to finish. You’ll see the job running in the table on the right of the interface.\nWhen our job is finished, we can view our results and filter them.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#filter-results",
    "href": "getting_started_web.html#filter-results",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.8 Filter Results",
    "text": "2.8 Filter Results\n\n\nWe are interested in those variants that have ClinVar annotation. How do we find those?\n\nNow we take a look at our results in the web interface. Under the list of jobs, we can see our job. Let’s select Open Result Viewer under the Status tab:\n Keep in mind that the web interface is limited to visualizing 100,000 variants, so if you have a larger result file, you’ll need to filter the results down. So let’s take a look at how to filter our variants down.\nWe can filter variants by selecting the Filter tab in the Results viewer:\n\nUnder “Variant Properties” we can limit our list of variants to those that have ClinVar annotations. Let’s build a filter using the Query Builder, which will allow us to impose multiple criteria as a filter.\n\nWe’ll add a rule (a logical condition) to our filter using the + button:\n\nNow we’ll add a rule and select those that have ClinVar annotations. To do this, we’ll first select a) ClinVar on the left, the b) Clinical Significance column, and c) has data:\n Now we can apply this rule we’ve built by clicking on the Apply Filter button on the bottom right of the Query Builder:\n How many variants are left after the filtering?\n\n\n\n\n\n\nCalculating the Effect of Filters\n\n\n\nIf you have multiple filters, you can actually precalculate the numbers of variants after filtering by using the icon below.\n\nThis can be helpful to check if your filters are too strict (that is, they won’t return anything).\nJust note that the filter is not actually applied to the data until you hit the Apply Filter Button.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#visualize-filtered-results",
    "href": "getting_started_web.html#visualize-filtered-results",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.9 Visualize Filtered Results",
    "text": "2.9 Visualize Filtered Results\n\nNow that we’ve filtered, let’s go back to the Summary Tab:\n In the Summary tab, we can see information about the annotated variants, such as from the sequence ontology. We can get the counts within a sequence ontology category by mousing over that category in our plot:\n These visualizations can be moved around and pinned. Using the camera icon, you can also save these visualizations.\nLet’s move over to the Variant tab and look for pathogenic variants. First, we’ll click over to the Variant tab:\n Scrolling to the right, we can see there is a column for the ClinVar annotations. Notice the + on the top right. We’ll click that to expand the ClinVar annotations:\n In the Clinical Significance column, we can see that we can filter. Let’s select those variants that have pathogenic significance. Clicking into the search box underneath this column, we can select pathogenic:\n\nHow many variants are pathogenic?\nThe last thing we might want to do is to export our results. We can use the export button at the bottom of the table:\n\nWhen you click that, you will have the option to export the variant level results as a tab seperated value (TSV) file. Note that this result table will have filters applied to it as well.\n\n\n\n\n\n\nMultiple Rules\n\n\n\nNote that we could have limited our search to pathogenic variants by adding another filter rule like we did above in the filtering step. We’re showing this way in case you didn’t know the available categories within the Clinical Significance column.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_web.html#what-you-learned",
    "href": "getting_started_web.html#what-you-learned",
    "title": "2  Getting Started (Website/GUI)",
    "section": "2.10 What You Learned",
    "text": "2.10 What You Learned\nYou learned a lot in this section. You learned how to:\n\nCreate a User Account\nBrowse OpenCRAVAT’s store to look for annotators\nSubmit a job to the OpenCRAVAT server\nFilter results in the Results Viewer\nVisualize results in the Results Viewer",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting Started (Website/GUI)</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html",
    "href": "getting_started_cli.html",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "",
    "text": "3.1 Learning Objectives\nWorking through this document, you will learn to:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#learning-objectives",
    "href": "getting_started_cli.html#learning-objectives",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "",
    "text": "Prepare your system for installing OpenCRAVAT\nInstall the OpenCRAVAT software locally using pip\nSearch for and Install available annotators\nExplain compatible variant formats\nAnnotate variant files using the CLI tools\nVisualize and Summarize Results in OpenCRAVAT",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#the-basic-opencravat-workflow",
    "href": "getting_started_cli.html#the-basic-opencravat-workflow",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.2 The Basic OpenCRAVAT Workflow",
    "text": "3.2 The Basic OpenCRAVAT Workflow\nIn the diagram below, we’ll see the basic OpenCRAVAT workflow on the command-line. Click the boxes below in the diagram to jump to that particular section.\n\n\n\n\n\nflowchart TD\n    L[Prepare for Installing] --&gt; A\n    click L \"#preparing-and-installing-opencravat\"\n    A[Installation] --&gt; G[Install Annotators]\n    click A \"#installing-opencravat\"\n    click G \"#installing-annotators\"\n    G --&gt; B[Convert to Input File Format]\n    click B \"#understanding-the-input-file-format\"\n    B --&gt;|Variant File Input| C[Map Variants and Annotate]\n    click C \"#annotating-our-example\"\n    C --&gt;|Results|D[Start Results Viewer]\n    click D \"#starting-the-results-viewer\"\n    D --&gt;|Results| E[Filter Results]\n    click E \"#examining-our-results-file-and-filtering\"\n    E --&gt;|Results| F[Visualizing Filtered Results]\n    click F \"#visualizing-our-filtered-results\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#preparing-and-installing-opencravat",
    "href": "getting_started_cli.html#preparing-and-installing-opencravat",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.3 Preparing and Installing OpenCRAVAT",
    "text": "3.3 Preparing and Installing OpenCRAVAT\n\nMake sure you know where your Python is installed using the which command. In my example, I have python 3.11 installed via Homebrew, which is the python I want to use. In my case, since I’m on MacOS, I know that I run python programs using python3 rather than python.\nwhich python3\ntedladeras@teds-MacBook-Pro ~ % which python3\n/opt/homebrew/bin/python3\nAlso, check whether you have pip or pip3 installed, and whether it has a similar location to your python3.\nwhich pip3\ntedladeras@teds-MacBook-Pro ~ % which pip3\n/opt/homebrew/bin/pip3\n\n3.3.1 Using a Virtual Environment\nYou should create a virtual environment so that your OpenCRAVAT installation is isolated from other installations. We’ll use venv, which installed in the default Python distribution.\nWe’ll make a separate virtual environment using the venv command. Here we’re creating a virtual environment called oc:\npython3 -m venv oc\nThis creates a folder called oc in our current directory. This is where all of our separate Python packages will live. Then we’ll activate the virtual environment using source:\nsource oc/bin/activate\nYou can double check whether the environment is activated by using which python3 again. It should poiint to the bin folder within your virtual environment folder.. Note that our prompt also has an (oc) in front.\nwhich python3\n(oc) tedladeras@teds-MacBook-Pro ~ % which python3\n/Users/tedladeras/oc/bin/python3\n\n\n3.3.2 Installing OpenCRAVAT\nNow we can install OpenCRAVAT using pip/pip3.\npip3 install open-cravat\ntedladeras@teds-MacBook-Pro local % pip3 install open-cravat\nCollecting open-cravat\n  Downloading open-cravat-2.4.2.tar.gz (3.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.1/3.1 MB 40.4 MB/s eta 0:00:00\n  Preparing metadata (setup.py) ... done\nCollecting pyyaml (from open-cravat)\n  Downloading PyYAML-6.0.1-cp311-cp311-macosx_11_0_arm64.whl.metadata (2.1 kB)\nCollecting requests (from open-cravat)\n  Downloading requests-2.31.0-py3-none-any.whl.metadata (4.6 kB)\nCollecting requests-toolbelt (from open-cravat)\n  Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\nConfirm that OpenCRAVAT is installed:\noc --help\ntedladeras@teds-MacBook-Pro ~ % oc --help\nusage: oc [-h] {run,report,gui,module,config,new,store,util,version,feedback} ...\n\nOpen-CRAVAT genomic variant interpreter. https://github.com/KarchinLab/open-cravat\n\noptions:\n  -h, --help            show this help message and exit\n\nCommands:\n  {run,report,gui,module,config,new,store,util,version,feedback}\n    run                 Run a job\n    report              Generate a report from a job\n    gui                 Start the GUI\n    module              Change installed modules\n    config              View and change configuration settings\n    new                 Create new modules\n    store               Publish modules to the store\n    util                Utilities\n    version             Show version\n    feedback            Send feedback to the developers\nAll of our interactions with OpenCRAVAT will be prefaced by oc. For example, we can launch the OpenCRAVAT GUI as a webserver on our machine using\noc gui\nNow you’re ready to start installing annotators.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#installing-via-bioconda",
    "href": "getting_started_cli.html#installing-via-bioconda",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.4 Installing Via Bioconda",
    "text": "3.4 Installing Via Bioconda\nIf you prefer to install via conda/mamba, here are directions for you. You will want to install mamba via miniforge: download the installation scripts here.\nWhen mamba has been installed, you’ll need to create a conda environment and install openCRAVAT via a single command:\nmamba create --name oc open-cravat\nThis will create an environment called oc\nWhen you’re ready to use OpenCRAVAT, you can activate this oc environment:\nmamba activate oc\nConfirm that you can see the oc executable with which. It should be where you installed miniforge:\nwhich oc\n/Users/tedladeras/miniforge3/envs/oc/bin/oc\nNow you can use OpenCRAVAT as below and install annotators.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#installing-annotators",
    "href": "getting_started_cli.html#installing-annotators",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.5 Installing Annotators",
    "text": "3.5 Installing Annotators\n\nThe first thing we’ll need to install are some core bits of OpenCRAVAT, called install-base. We’ll do this with the command oc module:\noc module install-base\ntedladeras@teds-MacBook-Pro local % oc module install-base\nInstalling: casecontrol:1.2.0, cravat-converter:1.1.2, excelreporter:2.1.1, go:2022.11.01, hg38:1.11.0, hg38wgs:1.0.0, oldcravat-converter:1.1.2, tagsampler:1.1.6, textreporter:2.1.0, varmeta:1.0.0, vcf-converter:2.2.1, vcfinfo:2.0.0, wgbase:1.1.3, wgcasecontrols:1.0.1, wgcasecontrolsummary:1.0.1, wgcircossummary:2.2.0, wgcodingvsnoncodingsummary:2.0.0, wggo:1.2.0, wggosummary:2.4.0, wghg19:1.0.3, wglollipop:2.2.1, wgncrna:1.1.0, wgndex:1.1.0, wgnote:3.0.0, wgrankscore:1.1.0, wgsosamplesummary:2.2.0, wgsosummary:1.5.0, wgvcfinfo:1.0.3\n[2024:01:31 14:17:48] Starting to install casecontrol:1.2.0...\n[2024:01:31 14:17:48] Downloading code archive of casecontrol:1.2.0...\n[**************************************************] 21.4 kB / 21.4 kB (100%)  \n[2024:01:31 14:17:49] Extracting code archive of casecontrol:1.2.0...\n[2024:01:31 14:17:49] Verifying code integrity of casecontrol:1.2.0...\n[2024:01:31 14:17:49] Finished installation of casecontrol:1.2.0\n[2024:01:31 14:17:49] Starting to install cravat-converter:1.1.2...\n[2024:01:31 14:17:49] Downloading code archive of cravat-converter:1.1.2...\n\n....[intermediate output skipped]\n\n[**************************************************] 670 B / 670 B (100%)  \n[2024:01:31 14:19:57] Extracting code archive of wgvcfinfo:1.0.3...\n[2024:01:31 14:19:57] Verifying code integrity of wgvcfinfo:1.0.3...\n[2024:01:31 14:19:57] Finished installation of wgvcfinfo:1.0.3\nLet’s list the available annotators. This is a very large list of annotators. This is just the first few entries.\ntedladeras@teds-MacBook-Pro local % oc module  ls -a -t annotator\nName                               Title                                                 Type       Installed  Store ver   Store data ver     Local ver   Local data ver  Size      \nabraom                             ABRaOM                                                annotator             1.0.0                                                      113.6 MB  \nalfa                               ALFA: Allele Frequency Aggregator                     annotator             1.0.0       2020.02.29                                     19.8 GB   \nalfa_african                       ALFA: Allele Frequency Aggregator African             annotator             1.0.0       2020.02.29                                     23.2 GB   \nalfa_asian                         ALFA: Allele Frequency Aggregator Asian               annotator             1.0.0       2020.02.29                                     24.1 GB   \nalfa_european                      ALFA: Allele Frequency Aggregator European            annotator             1.0.0       2020.02.29                                     19.8 GB   \nalfa_latin_american                ALFA: Allele Frequency Aggregator Latin American      annotator             1.0.0       2020.02.29                                     20.3 GB   \nalfa_other                         ALFA: Allele Frequency Aggregator Others      \n\n....\nWe’re actually looking for ClinVar, which is a list of clinically relevant annotations. Note that all of the annotators are in lower snake case (such as alfa_asian). So we can add clinvar in with our query.\noc module ls -a clinvar -t annotator \ntedladeras@teds-MacBook-Pro local % oc module ls -a clinvar -t annotator \nName     Title    Type       Installed  Store ver   Store data ver  Local ver  Local data ver  Size      \nclinvar  ClinVar  annotator             2023.02.01  2023.02.01.1                               381.8 MB  \nOk, now we know our annotator exists, and we can install it with the oc module install command:\noc module install clinvar\nWe’ll need to confirm y to proceed:\ntedladeras@teds-MacBook-Pro local % oc module install clinvar\nInstalling: clinvar:2023.02.01, wgclinvar:1.1.1\nProceed? ([y]/n) &gt; y\nThen the installation will proceed:\n[2024:01:31 14:25:08] Starting to install clinvar:2023.02.01...\n[2024:01:31 14:25:08] Downloading code archive of clinvar:2023.02.01...\n[**************************************************] 290.9 kB / 290.9 kB (100%)  \n[2024:01:31 14:25:09] Extracting code archive of clinvar:2023.02.01...\n[2024:01:31 14:25:09] Verifying code integrity of clinvar:2023.02.01...\n[2024:01:31 14:25:09] Downloading data of clinvar:2023.02.01...\n[**************************************************] 49.0 MB / 49.0 MB (100%)  \n[2024:01:31 14:25:15] Extracting data of clinvar:2023.02.01...\n[2024:01:31 14:25:15] Verifying data integrity of clinvar:2023.02.01...\n[2024:01:31 14:25:16] Finished installation of clinvar:2023.02.01\n[2024:01:31 14:25:16] Starting to install wgclinvar:1.1.1...\n[2024:01:31 14:25:16] Downloading code archive of wgclinvar:1.1.1...\n[**************************************************] 36.8 kB / 36.8 kB (100%)  \n[2024:01:31 14:25:17] Extracting code archive of wgclinvar:1.1.1...\n[2024:01:31 14:25:17] Verifying code integrity of wgclinvar:1.1.1...\n[2024:01:31 14:25:17] Finished installation of wgclinvar:1.1.1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#understanding-the-input-file-format",
    "href": "getting_started_cli.html#understanding-the-input-file-format",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.6 Understanding the Input File Format",
    "text": "3.6 Understanding the Input File Format\nWe can generate an example file using oc new example-input. Note the period at the end, which means that we will generate the file in the current directory:\noc new example-input .\nLet’s confirm that we created this example:\nls -l example*\ntedladeras@teds-MacBook-Pro ~ % ls -l example*\n-rw-r--r--  1 tedladeras  staff    9036 Jan 31 14:27 example_input\nNote the created file has an underscore (_) rather than a dash (-). Let’s take a look at the example_input file that we created:\ncat example_input | head\nchr1    69091   +   A   C   s0\nchr1    69091   +   ATG C   s0\nchr6    31039077    +   C   G   s0\nchr1    27612918    +   G   a   s1\nchr1    27612918    +   G   A   s0\nchrM    235 +   A   G   clinvar\nchrM    3308    +   T   C   omim\nchr8    54626835    +   A   T   s0\nchr4    1804372 +   A   G   s1\nchr4    1804372 +   AT  GC  s1\nchr4    1804372 +   A   T   s1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#annotating-our-example",
    "href": "getting_started_cli.html#annotating-our-example",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.7 Annotating Our Example",
    "text": "3.7 Annotating Our Example\n\nNow we have our example, we can run OpenCRAVAT. This will annotate our example_input file with all available annotators.\noc run ./example_input -l hg38\ntedladeras@teds-MacBook-Pro ~ % oc run ./example_input -l hg38\nInput file(s): /Users/tedladeras/example_input\nGenome assembly: hg38\nRunning converter...\n    Converter (converter)           finished in 0.124s\nRunning gene mapper...                  finished in 2.668s\nRunning annotators...\n    annotator(s) finished in 1.466s\nRunning aggregator...\n    Variants                        finished in 0.010s\n    Genes                           finished in 0.003s\n    Samples                         finished in 0.022s\n    Tags                            finished in 0.025s\nIndexing\n    variant base__coding    finished in 0.000s\n    variant base__chrom finished in 0.000s\n    variant base__so    finished in 0.000s\nRunning postaggregators...\n    Tag Sampler (tagsampler)        finished in 0.008s\nFinished normally. Runtime: 4.539s",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#starting-the-results-viewer",
    "href": "getting_started_cli.html#starting-the-results-viewer",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.8 Starting the Results Viewer",
    "text": "3.8 Starting the Results Viewer\n\nWe saw that one of the files generated was an .sqlite file. These are our results, which we can visualize using oc gui, which will launch the a web server so we can examine our results using the GUI:\noc gui example_input.sqlite\ntedladeras@teds-MacBook-Pro ~ % oc gui example_input.sqlite\n\n   ____                   __________  ___ _    _____  ______\n  / __ \\____  ___  ____  / ____/ __ \\/   | |  / /   |/_  __/\n / / / / __ \\/ _ \\/ __ \\/ /   / /_/ / /| | | / / /| | / /   \n/ /_/ / /_/ /  __/ / / / /___/ _, _/ ___ | |/ / ___ |/ /    \n\\____/ .___/\\___/_/ /_/\\____/_/ |_/_/  |_|___/_/  |_/_/     \n    /_/                                                     \n\nOpenCRAVAT is served at localhost:8080\n(To quit: Press Ctrl-C or Ctrl-Break if run on a Terminal or Windows, or click \"Cancel\" and then \"Quit\" if run through OpenCRAVAT app on Mac OS)\n(Getting result of [example_input.sqlite]:[variant]...)\nDone getting result of [example_input.sqlite][variant] in 0.029s\n(Getting result of [example_input.sqlite]:[gene]...)\nDone getting result of [example_input.sqlite][gene] in 0.021s\nA window should open in your web browser. If not, enter https://localhost:8080 to view the file.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#examining-our-results-file-and-filtering",
    "href": "getting_started_cli.html#examining-our-results-file-and-filtering",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.9 Examining Our Results File and Filtering",
    "text": "3.9 Examining Our Results File and Filtering\n\nNow we take a look at our results in the web interface. Under the list of jobs, we can see our job. Let’s select Open Result Viewer under the Status tab:\n\nKeep in mind that the web interface is limited to visualizing 100,000 variants, so if you have a larger result file, you’ll need to filter the results down. So let’s take a look at how to filter our variants down.\nWe can filter variants by selecting the Filter tab in the Results viewer:\n\nUnder “Variant Properties” we can limit our list of variants to those that have ClinVar annotations. Let’s build a filter using the Query Builder, which will allow us to impose multiple criteria as a filter.\n\nWe’ll add a rule (a logical condition) to our filter using the + button:\n\nNow we’ll add a rule and select those that have ClinVar annotations. To do this, we’ll first select a) ClinVar on the left, the b) Clinical Significance column, and c) has data:\n Now we can apply this rule we’ve built by clicking on the Apply Filter button on the bottom right of the Query Builder:\n How many variants are left after the filtering?\n\n\n\n\n\n\nCalculating the Effect of Filters\n\n\n\nIf you have multiple filters, you can actually precalculate the numbers of variants after filtering by using the icon below.\n\nThis can be helpful to check if your filters are too strict (that is, they won’t return anything).\nJust note that the filter is not actually applied to the data until you hit the Apply Filter Button.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#visualizing-our-filtered-results",
    "href": "getting_started_cli.html#visualizing-our-filtered-results",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.10 Visualizing Our Filtered Results",
    "text": "3.10 Visualizing Our Filtered Results\n\nNow that we’ve filtered, let’s go back to the Summary Tab:\n In the Summary tab, we can see information about the annotated variants, such as from the sequence ontology. We can get the counts within a sequence ontology category by mousing over that category in our plot:\n These visualizations can be moved around and pinned. Using the camera icon, you can also save these visualizations.\nLet’s move over to the Variant tab and look for pathogenic variants. First, we’ll click over to the Variant tab:\n Scrolling to the right, we can see there is a column for the ClinVar annotations. Notice the + on the top right. We’ll click that to expand the ClinVar annotations:\n In the Clinical Significance column, we can see that we can filter. Let’s select those variants that have pathogenic significance. Clicking into the search box underneath this column, we can select pathogenic:\n\nHow many variants are pathogenic?\nThe last thing we might want to do is to export our results. We can use the export button at the bottom of the table:\n\nWhen you click that, you will have the option to export the variant level results as a tab seperated value (TSV) file. Note that this result table will have filters applied to it as well.\n\n\n\n\n\n\nMultiple Rules\n\n\n\nNote that we could have limited our search to pathogenic variants by adding another filter rule like we did above in the filtering step. We’re showing this way in case you didn’t know the available categories within the Clinical Significance column.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#deactivating-your-environment",
    "href": "getting_started_cli.html#deactivating-your-environment",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.11 Deactivating Your Environment",
    "text": "3.11 Deactivating Your Environment\nWhen you’re done using OpenCRAVAT and it’s installed by an environment, make sure to deactivate:\nFor the python/venv installation:\ndeactivate\nFor the mamba/conda installation:\nmamba deactivate",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "getting_started_cli.html#what-you-learned",
    "href": "getting_started_cli.html#what-you-learned",
    "title": "3  Getting Started with OpenCRAVAT on the Command Line",
    "section": "3.12 What You Learned",
    "text": "3.12 What You Learned\nWe learned the following in this section:\n\nPrepare your system for installing OpenCRAVAT\nInstall the OpenCRAVAT software locally using pip\nSearch for and Install available annotators\nExplain compatible variant formats\nAnnotate variant files using the CLI tools\nVisualize and Summarize Results in OpenCRAVAT",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting Started with OpenCRAVAT on the Command Line</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html",
    "href": "making_annotator_modules.html",
    "title": "4  Making an Annotator Module",
    "section": "",
    "text": "4.1 Annotator Overview",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#annotator-overview",
    "href": "making_annotator_modules.html#annotator-overview",
    "title": "4  Making an Annotator Module",
    "section": "",
    "text": "Initializing an new annotator skeleton using oc new annotator &lt;modulename&gt;\nLoading an annotator file into a SQLite database (&lt;modulename&gt;.sqlitess) using sqlite3\nMapping the annotator sqlite file in the &lt;modulename&gt;.py file\nCustomizing the output using the &lt;modulename&gt;.yml file\n\n\n\n/Users/Shared/open-cravat/modules/annotators/sift\n├── data\n│   └── sift.sqlite               ## contains annotations in sqlite format\n├── sift.md                       ## describes how to use annotator\n├── sift.py                       ## maps annotation columns to variant input\n└── sift.yml                      ## configures output columns\n\n3 directories, 5 files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#initializing-an-annotator-module",
    "href": "making_annotator_modules.html#initializing-an-annotator-module",
    "title": "4  Making an Annotator Module",
    "section": "4.3 Initializing an annotator module",
    "text": "4.3 Initializing an annotator module\nBefore we create a new annotator, we need to find where modules are installed on the system. We can do this by using oc config md:\noc config md\n/Users/Shared/open-cravat/modules\nNow we can create our new sift module using oc new annotator:\n#| eval: false\noc new annotator sift\nAnnotator sift_annotator created at /Users/Shared/open-cravat/modules/annotators/sift\nIf we take a look at the file structure of our initialized module it looks like this:\ntree  /Users/Shared/open-cravat/modules/annotators/sift/\n/Users/Shared/open-cravat/modules/annotators/sift/\n├── data\n│   └── sift.sqlite\n├── sift.md\n├── sift.py\n└── sift.yml\nSo now we need to get our annotations into the sqlite format, map it in our annotate() method, and then customize the display in our .yml file.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#loading-annotations-as-a-sqlite-file",
    "href": "making_annotator_modules.html#loading-annotations-as-a-sqlite-file",
    "title": "4  Making an Annotator Module",
    "section": "4.4 Loading annotations as a SQLite file",
    "text": "4.4 Loading annotations as a SQLite file\nOpenCRAVAT requires us to supply our annotations as a SQLite file. sqlite3 is a database system that allows us to package our annotations in the .sqlite format, which makes our annotations accessible to OpenCRAVAT.\nSQLite is available on most systems (MacOS/PC/Linux) as the sqlite3 command.\n\n4.4.1 Fetching our SQLite annotations\n\n\nLet’s take a look at an example .sqlite file before we load our own. In our annotator’s data/ directory (for example, /Users/Shared/open-cravat/modules/annotators/sift/data/), we can fetch an example .sqlite file. We’ll rename it sift.sqlite.\nwget \"https://github.com/KarchinLab/open-cravat-modules-karchinlab/blob/master/annotators/example/data/example.sqlite?raw=true\" -O sift.sqlite\n--2024-05-24 07:31:22--  https://github.com/KarchinLab/open-cravat-modules-karchinlab/blob/master/annotators/example/data/example.sqlite\nResolving github.com (github.com)... 140.82.113.4\nConnecting to github.com (github.com)|140.82.113.4|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nSaving to: ‘example.sqlite’\n\nexample.sqlite                      [  &lt;=&gt;                                                ] 157.51K   602KB/s    in 0.3s    \n\n2024-05-24 07:31:23 (602 KB/s) - ‘example.sqlite’ saved [161288]\n\nNow that we have it in our annotator’s data/ directory, we can query it.\nsqlite3 sift.sqlite 'select * from sift limit 10;'\nchr17|43045681|G|A|1.0|7\nchr17|43045681|G|G|1.0|7\nchr17|43045682|T|A|0.0|7\nchr17|43045682|T|C|0.0|7\nchr17|43045682|T|G|0.0|7\nchr17|43045682|T|T|1.0|7\nchr17|43045683|A|A|1.0|7\nchr17|43045683|A|C|0.0|7\nchr17|43045683|A|G|0.0|7\nchr17|43045683|A|T|0.0|7\n\n\n4.4.2 Importing a Comma Separated Value file to SQLite\n\n\nNow that we’re more familiar with the SQLite format, we can start loading our own version. We’ll do this for a CSV (comma separated value) file first.\nWe’ll first create the sift.sqlite file by using sqlite3. This will put us into the sqlite3 prompt interface.\nsqlite3 sift.sqlite\nSQLite version 3.43.2 2023-10-10 13:08:14\nEnter \".help\" for usage hints.\nsqlite&gt;\n\n\n\n\n\n\nInteracting with the sqlite3 prompt\n\n\n\nThere are two main ways we can interact with the sqlite3 interface: SQL Queries:\nSELECT * from SIFT LIMIT 5;\nNote that SQL queries always end with a ;.\nThe other way we can interact with the interface are dot commands, such as .mode or .schema - these do not end with a ;. These dot commands are are often used to change internal settings for the sqlite database. For example, to set the import format to .csv, we can use:\n.mode csv\nAgain, note that these commands don’t end with a ;. You will get errors if you terminate them with ;.\nTo make things easier to distinguish, we’ll use all caps for SQL and lowercase for dot commands.\n\n\n\n\n4.4.3 Creating our Table\nBefore we load our data in, we need to create our table. This is important because our columns have different data types, and we have to map them to the SQLite data types:\nCREATE TABLE \"sift\" ('chrom' TEXT, 'pos' INT, \n                     'ref' TEXT, 'alt' TEXT, \n                     'score' REAL, 'nseq' INT);\nCREATE INDEX main_index on sift (chrom, pos, ref, alt);\nNote that score (the SIFT score) has a REAL data type.\nNow that the table is created, we can load our sift.csv file. We need to change the mode to csv.\n.mode csv\nNow we can import our data using the .import dot command. Because our sift.csv has a header row, we need to skip it, so we use the --skip 1 argument.\n.import --skip 1 sift.csv sift\nWe can check that we loaded in our data correctly by using the .schema command and a SELECT * query:\n.schema\nCREATE TABLE sift (chrom text, pos int, ref text, alt text, score real, nseq int);\nCREATE INDEX main_index on sift (chrom, pos, ref, alt);\ncha\n.mode box\nSELECT * FROM sift LIMIT 5;\n┌───────┬──────────┬─────┬─────┬───────┬──────┐\n│ chrom │   pos    │ ref │ alt │ score │ nseq │\n├───────┼──────────┼─────┼─────┼───────┼──────┤\n│ chr17 │ 43045681 │ G   │ A   │ 1.0   │ 7    │\n│ chr17 │ 43045681 │ G   │ G   │ 1.0   │ 7    │\n│ chr17 │ 43045682 │ T   │ A   │ 0.0   │ 7    │\n│ chr17 │ 43045682 │ T   │ C   │ 0.0   │ 7    │\n│ chr17 │ 43045682 │ T   │ G   │ 0.0   │ 7    │\n└───────┴──────────┴─────┴─────┴───────┴──────┘\nWhen we’re done, we can use .exit to exit our session and save our .sqlite file.\n.exit\nWe can double check our .sqlite file has our information by using sqlite3 to execute a query on the command line:\nsqlite3 sift.sqlite 'select * from sift limit 5;'\n\n\n\n\n\n\nLoading VCF Files as Annotations\n\n\n\nLet’s try loading in an RNA Editing VCF file into a .sqlite file.\nThe first thing that we should notice is that there are multiple rows we need to skip to load our VCF data in. There are 4 lines of metadata + 1 header row that we need to skip to load our data in correctly.\ntedladeras$ head GRCh38.RNAediting.vcf \n##fileformat=VCFv4.2\n##reference=GRCh38\n##source=Rediportal\n##INFO=&lt;ID=RNAEDIT,Type=String,Description=\"A known or predicted RNA-editing site\"&gt;\n#CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO\nchr1    10187   .       A       G       .       .       RNAEDIT=RADAR\nchr1    10193   .       A       G       .       .       RNAEDIT=RADAR\nchr1    10211   .       A       G       .       .       RNAEDIT=RADAR\nchr1    10217   .       A       G       .       .       RNAEDIT=RADAR\nchr1    10223   .       A       G       .       .       RNAEDIT=RADAR\nAgain, we create our database:\nsqlite3 vcf.sqlite\nThen we can define our table:\ncreate table \"vcf\" (\"chrom\" TEXT, \"pos\" INT, \"id\" TEXT, \n                    \"ref\" TEXT, \"alt\" TEXT, \"qual\" INT, \n                    \"filter\" TEXT, \"info\" TEXT);\nAnd then we can load our VCF file. Note that we need to skip 5 rows (VCF file metadata and the header row) to load our data in.\n.mode tabs\n.import --skip 5 GRCh38.RNAediting.vcf vcf\nThen we can check that we loaded the data correctly:\n.mode box\nselect * from vcf limit 10;\nFinally, now that we’re satisfied, we can .exit:\n.exit",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#mapping-our-annotator-file",
    "href": "making_annotator_modules.html#mapping-our-annotator-file",
    "title": "4  Making an Annotator Module",
    "section": "4.5 Mapping our annotator file",
    "text": "4.5 Mapping our annotator file\n\n\nNow that our data is loaded into our .sqlite file, we need to set up our mapping. If we look in sift.py, we’ll see there are stubs for three methods: setup(), annotate(), and cleanup():\n\n\n\n\n\nflowchart LR\n  A[sift_annotator.py] --method--&gt;B[\"setup()\"]\n  A --method--&gt;C[\"annotate()\"]\n  A --method--&gt;D[\"cleanup()\"]\n\n\n\n\n\n\nThis is what the .py file looks like:\ncat /Users/Shared/open-cravat/modules/annotators/sift/sift.py\nimport sys\nfrom cravat import BaseAnnotator\nfrom cravat import InvalidData\nimport sqlite3\nimport os\n\nclass CravatAnnotator(BaseAnnotator):\n\n    def setup(self): \n        \"\"\"\n        Set up data sources. \n        Cravat will automatically make a connection to \n        data/example_annotator.sqlite using the sqlite3 python module. The \n        sqlite3.Connection object is stored as self.dbconn, and the \n        sqlite3.Cursor object is stored as self.cursor.\n        \"\"\"\n        pass\n    \n    def annotate(self, input_data, secondary_data=None):\n        \"\"\"\n        The annotator parent class will call annotate for each line of the \n        input file. It takes one positional argument, input_data, and one\n        keyword argument, secondary_data.\n        \n        input_data is a dictionary containing the data from the current input \n        line. The keys depend on what what file is used as the input, which can \n        be changed in the module_name.yml file. \n        Variant level includes the following keys: \n            ('uid', 'chrom', 'pos', 'ref_base', 'alt_base')\n        Variant level crx files expand the key set to include:\n            ('hugo', 'transcript','so','all_mappings')\n        Gene level files include\n            ('hugo', 'num_variants', 'so', 'all_so')\n        \n        secondary_data is used to allow an annotator to access the output of\n        other annotators. It is described in more detail in the CRAVAT \n        documentation.\n        \n        annotate should return a dictionary with keys matching the column names\n        defined in example_annotator.yml. Extra column names will be ignored, \n        and absent column names will be filled with None. Check your output\n        carefully to ensure that your data is ending up where you intend.\n        \"\"\"\n        out = {}\n        out['placeholder_annotation'] = 'placeholder value'\n        return out\n    \n    def cleanup(self):\n        \"\"\"\n        cleanup is called after every input line has been processed. Use it to\n        close database connections and file handlers. Automatically opened\n        database connections are also automatically closed.\n        \"\"\"\n        pass\n        \nif __name__ == '__main__':\n    annotator = CravatAnnotator(sys.argv)\n    annotator.run()\nWe will focus on the annotate() method first.\n\n4.5.1 annotate() method\nOur annotate() method is where we map our annotations in our .sqlite file to an input called input_data. input_data essentially is a single row of our genomic file to annotate represented as a dictionary.\nThis is what our input_data list looks like:\n\n\n\n\n\nerDiagram\n    input_data{\n      string chrom\n      int pos\n      string ref_base\n      string alt_base\n    }\n\n\n\n\n\n\nIn order to annotate our file, we need to map each relevant element of input_data to a column in our .sqlite file.\n\n\n\n\n\nMapping between input_data and our sift table\n\n\n\nchrom = input_data[\"chrom\"]\npos = input_data[\"pos\"]\nquery = (f'select score, nseq from sift' \\\n          'where chrom=\"{chrom}\"'\\\n          'and pos=\"{pos}\"')\nself.cursor.execute(query)\nresult = self.cursor.fetchone()\n\n\nThe first thing we do is we extract chrom and pos from our list:\nchrom = input_data[\"chrom\"]\npos = input_data[\"pos\"]\nLet’s look at our query next.\nquery = (f'select score, nseq from sift' \\\n          'where chrom=\"{chrom}\"'\\\n          'and pos=\"{pos}\"')\nNote that we are querying our table, so the table’s column is on the left size, and the input_data field is on the left. We are using variable substitution in our query to match the value to chrom in our table. In other words, our query works like this:\nwhere chrom =\"{chrom}\"\n      ^^^^.     ^^^^\n      sift      input_data\n      table\nFinally, we execute our query by using the execute() method that was inherited in our class definition.\nself.cursor.execute(query)\nresult = self.cursor.fetchone()\nThe last bit calculates a new column, called prediction based on the actual SIFT score. We call everthing below\n    if result is not None:\n        score = result[0]\n        num_seq = result[1]\n        if score &lt;= 0.05:\n            prediction = 'Damaging'\n        else:\n            prediction = 'Tolerated'\nFinally, we return our annotations as a dictionary. If there was no result, we return None:\n        return {\n            'score': score,\n            'seq_count': num_seq,\n            'prediction': prediction,\n        }\n    else:\n        return None\nOur final annotate() method looks like this:\ndef annotate(self, input_data, secondary_data=None):\n    chrom = input_data['chrom']\n    pos = input_data['pos']\n    ref_base = input_data['ref_base']\n    alt_base = input_data['alt_base']\n    query = f'select score, nseq from sift where chrom=\"{chrom}\" and pos={pos} and ref=\"{ref_base}\" and alt=\"{alt_base}\";'\n    self.cursor.execute(query)\n    result = self.cursor.fetchone()\n    if result is not None:\n        score = result[0]\n        num_seq = result[1]\n        if score &lt;= 0.05:\n            prediction = 'Damaging'\n        else:\n            prediction = 'Tolerated'\n        return {\n            'score': score,\n            'seq_count': num_seq,\n            'prediction': prediction,\n        }\n    else:\n        return None",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#configure-sift_annotator.yml",
    "href": "making_annotator_modules.html#configure-sift_annotator.yml",
    "title": "4  Making an Annotator Module",
    "section": "4.6 Configure sift_annotator.yml",
    "text": "4.6 Configure sift_annotator.yml\nNow that our annotate() method is filled in, we need to configure how our annotations will be displayed.\n#| eval: false\ncat /Users/Shared/open-cravat/modules/annotators/sift_annotator/sift_annotator.yml\n# 'title' is the name of the module that will be displayed to the user\ntitle: Annotator Template\n\n# 'version' is the version of the annotator. It is primarily used when \n# publishing a module, but is required for all modules.\nversion: 0.0.1\n\n# 'type' is the type of module described by this .yml file. In this case it is\n# 'annotator'\ntype: annotator\n\n# 'level' is 'variant' or 'gene'\nlevel: variant\n\n# output_columns has the columns that will be included in the output file.\n# The columns are defined in a list. Each column has three required keys:\n# name, title, and type.\noutput_columns:\n  # name is the internal name and is the key used to identify the column in the\n  # dictionary returned by the annotate method of annotator_name.py\n- name: placeholder_annotation\n  # title is the display name of this column, similar to the title of the module.\n  # It can be changed without affecting the functionality of CRAVAT\n  title: Placeholder Annotation\n  # type is the data type of the value. It is primarily used when storing the \n  # results in a database. It may be one of string, int, or float.\n  type: string\n\n# description is a short description of what the annotator does. Try to limit it\n# to around 80 characters.\ndescription: Template annotator. If you see this description in production, someone is wrong.\n\n# developer is you!\ndeveloper:\n  name: ''\n  organization: ''\n  email: ''\n  website: ''\n  citation: ''\nAfter filling it out and cleaning it up, your sift_annotator.yml should look like this:\ntitle: Sift Annotator\nversion: 0.0.1\ntype: annotator\nlevel: variant\n\noutput_columns:\n- name: prediction\n  title: Prediction\n  type: string\n- name: score\n  title: Score\n  type: float\n- name: seq_count\n  title: Seqs at Position\n  type: int\n\ndescription: Annotates variants with sift scores and categories\n\n[....]",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#test-it-out",
    "href": "making_annotator_modules.html#test-it-out",
    "title": "4  Making an Annotator Module",
    "section": "4.7 Test it out!",
    "text": "4.7 Test it out!\nNow that we’re finished with building our annotator module, it’s time to test it. Try it out with the GUI, or you can run it on the command line:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#requirements-for-publishing-in-the-opencravat-store",
    "href": "making_annotator_modules.html#requirements-for-publishing-in-the-opencravat-store",
    "title": "4  Making an Annotator Module",
    "section": "4.7 Requirements for publishing in the OpenCravat store",
    "text": "4.7 Requirements for publishing in the OpenCravat store",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "filtering.html",
    "href": "filtering.html",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "",
    "text": "5.1 Why Filter?\nFiltering your annotated variants lets you query interesting subsets of your variants.\nA secondary purpose of filtering is when you want to view your results in the results viewer and you have more than 100K variants.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#filtering-roadmap",
    "href": "filtering.html#filtering-roadmap",
    "title": "5  Filtering",
    "section": "5.2 Filtering Roadmap",
    "text": "5.2 Filtering Roadmap\n\n\n\n\n\nflowchart TD\n  A[\"Results Viewer\"] --&gt; B\n  B[\"Build Filter in GUI\"] \n  B --&gt; F[\"Explore Filtered Data\"]\n  F --&gt; G[\"Save JSON filter\"]\n  G --&gt; D[\"Apply filter to New Set\"]\n  G --&gt; E[\"Apply Filter on CLI\"]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering</span>"
    ]
  },
  {
    "objectID": "filtering.html#filtering-in-the-gui",
    "href": "filtering.html#filtering-in-the-gui",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.3 Filtering in the GUI",
    "text": "5.3 Filtering in the GUI\nOnce you have your annotated results, you can filter variants in the results viewer. There are 4 kinds of filters:\n\nSamples\nGenes\nSample Properties\nVariant Properties\n\nWe will go through each of these filters and their functionality after we talk about the common GUI elements of each.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#sample-data-for-demonstration-purposes",
    "href": "filtering.html#sample-data-for-demonstration-purposes",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.4 Sample Data for Demonstration Purposes",
    "text": "5.4 Sample Data for Demonstration Purposes\nWe will use a subset of a synthetic dataset that is a trio. There are 5 individuals in this dataset.\n\nThe Proband\nMother\nFather\nSibling 1\nSibling 2\n\nSome of the variants are shared by the Proband and Mother, and all other combinations. We will leverage these different combinations in our example below.\n\n5.4.1 Downloading the Sample Data\nYou can download the sample result file here: Synthetic Trio Dataset\nOn the command line, you can download it into your current directory with wget:\nwget https://github.com/laderast/oc_vignettes/raw/main/data/Session2.filtered.sqlite\nWhen you’re ready, open up the file with oc gui:\noc gui Session2.filtered.sqlite\n\n\n5.4.2 Samples\nYou can remove variants associated with a set of sample IDs by clicking on the checkboxes here. For example, we want all of the variants that are associated with the mother. We’ll click on the “mother” checkbox until it is a green check.\n If we look at the Variant tab, we can see that our variants include multiple members:\n Here’s a visual summary of the results.\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Sample:mother\"--&gt; B\n  B[\"Mother Variants\\n(n=1187)\"]\n\n\n\n\n\n\nThese are all of the variants that are associated with the mother, and include variants that are shared by other family members. What about variants that are exclusive to the mother?\nFor example, we can filter for\nTo exclude samples, click on the checkbox until you see a red x.\n After filtering, we find that 385 variants are exclusive to the mother. We can confirm this by going to the Variant tab:\n Here’s the visual summary:\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Sample:mother\\nExclude:others\"--&gt; B\n  B[\"Mother Variants\\n(n=385)\"]\n\n\n\n\n\n\n\n\n5.4.3 Genes\nGene-level filtering can be done here. You can input a list of genes, separated by line-breaks.\nClearing our previous filter, let’s filter to only those variants that are in BRCA1 and BRCA2.\nTo filter, we take the following steps in the Gene filter section:\n\nEnter a list of genes, 1 gene per line in the text box. You can also upload a list of genes as well.\nApply the filter\nSee the results. There are 63 variants associated with BRCA1/BRCA2.\n\n Going to the Variant tab, we can confirm that the variants belong to BRCA1 and BRCA2.\n Here’s the visual summary of the filter:\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Gene:(BRCA1,BRCA2)\"--&gt; B\n  B[\"BRCA1/BRCA2 Genes\\n(n=63)\"]\n\n\n\n\n\n\n\n\n5.4.4 Sample Properties\n\n\n5.4.5 Variant Properties\nIn variant properties, you can filter by variant type based on your annotations. For example, let’s filter our dataset to missense variants.\nA. Under Variant Properties:\n\nClick on “Query Builder”.\nMouse into the left bottom corner of the query builder window, and click the “+” sign.\n\n\nB. Make your filter by selecting the values for the following dropdown boxes:\n\nVariant Annotation\nSequence Ontology\nOne of\nMissense checkbox\n\n C. Finally, click the “Apply Filter” Button:\n\nYou will be left with 299 variants. Here’s a visual summary of what we did:\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Sequence Ontology:\\nMissense\"--&gt; B[\"Missense Variants\\n(n=299)\"]",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#advanced-boolean-operations",
    "href": "filtering.html#advanced-boolean-operations",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.5 Advanced: Boolean Operations",
    "text": "5.5 Advanced: Boolean Operations\nYou can build more sophisticated operations by combining each filter step using Boolean logic.\n\n5.5.1 Adding Another Filter\nYou can add another filter by clicking the + underneath your filter.\n\n\n\n5.5.2 AND Logic\nBy default, the filters are combined using AND logic, which are more restrictive, because they require variants to meet both filters.\nHere’s an example of using AND logic. Here we are combining two filters: Missense Variants (from Variant Annotation &gt;&gt; Sequence Ontology) and Pathogenic variants (from ClinVar &gt;&gt; Clinical Significance).\n Then do the following:\n\nSelect “ClinVar”\nSelect “Clinical Significance”\nSelect “One of”\nSelect “Pathogenic”\nClick “Filter Result”\n\n If we look at the Variant tab, we can see that our combined filter selected both Pathogenic and Missense Variants.\n\nWhen we apply the filter, we get 9 variants that meet both criteria. Here’s a visual summary of the filtering:\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Sequence Ontology:\\nmissense\"--&gt; B[\"Missense Variants\\(n=299)\"]\n  A --\"Clinical Significance:\\nPathogenic\"--&gt; C[\"Pathogenic Variants\\n(n=10)\"]\n  B --\"AND\"--&gt; E[\"Pathogenic AND Missense\\n(n=9)\"]\n  C --\"AND\"--&gt; E\n\n\n\n\n\n\n\n\n5.5.3 OR Logic\nThese filters can also be combined using OR logic, which is more permissive (that is, these filters will return a greater number than the AND logic) we might want variants that are either missense OR pathogenic.\nWe can do this by clicking the “and” that links our two filters, which will switch it to an “or”:\n When we apply the filter, we get 300 variants. The breakdown is below.\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"] --\"Sequence Ontology:\\nmissense\"--&gt; B[\"Missense Variants\\n(n=299)\"]\n  A --\"Clinical Significance:\\nPathogenic\"--&gt; C[\"Pathogenic Variants\\n(n=10)\"]\n  B --\"OR\"--&gt; E[\"Pathogenic OR Missense\\n(n=300)\"]\n  C --\"OR\"--&gt; E\n\n\n\n\n\n\n\n\n5.5.4 Grouping With Parentheses\nWe can use the parentheses to group filters together. This can be helpful when we combine different types of logic.\nTo make a grouped filter, click the ( button next to the + button in the interface:\n\nThen you can build a set of filters much like above. Notice that they are grouped within a set of parentheses.\n Keep in mind that you can nest parentheses within parentheses to make even more complex filters. We’ll use this to be able to combine three filters with AND and OR logic below.\n\n\n5.5.5 Combining AND / OR Logic\nBy default, when you click the “and” / “or” of one set of filters, all filters will be changed. If you want to combine AND / OR logic, you can group one of the logic operations using parentheses.\nFor example, say we want the above OR subset combined as an AND with those variants that have PS1 evidence.\nThis is what our final filter looks like:\n Here’s a visual breakdown of this complex filter:\n\n\n\n\n\ngraph TD\n  A[\"All Variants\\n(n=1,738)\"]--\"Sequence Ontology:\\nmissense\"--&gt; B\n  A --\"Clinical Significance:\\nPathogenic\"--&gt; C\n  subgraph OR\n  B[\"Missense Variants\\n(n=299)\"]\n  C[\"Pathogenic Variants\\n(n=10)\"]\n  B --\"OR\"--&gt; E[\"Pathogenic OR Missense\\n(n=300)\"]\n  C --\"OR\"--&gt; E\n  end\n  F[\"PS1 Variants\\n(n=27)\"]\n  E --\"AND\"--&gt; G[\"PS1 Variants AND\\n(Missense OR Pathogenic)\\n(n=27)\"]\n  A --\"ClinVar ACMG\\nPS1 variants\"--&gt; F\n  F --\"AND\"--&gt; G\n  classDef White fill:#FFFFFF;\n  class OR White\n\n\n\n\n\n\n\n\n5.5.6 NOT Logic\nIf we mouse over the top left of a filter or filter group, we’ll see a faint “NOT”.\n\nClicking this will change the logic to NOT.\n\nThen we can hit Apply Filter again. In our case, we have 1,729 variants that do not meet our filter criterion. This makes sense because there were 9 variants total that met our grouped criterion, and 1,738 variants total, and 1738 - 9 = 1729.\n\n\n5.5.7 Deleting a Filter\nFinally, if you need to delete a filter, you can mouse to the right of the filter. A faint “X” will appear. Clicking on it will delete that filter.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#exporting-filters-as-json",
    "href": "filtering.html#exporting-filters-as-json",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.6 Exporting Filters as JSON",
    "text": "5.6 Exporting Filters as JSON\nFilters can be exported and saved as JSON files for further reuse. They can be applied to a new set of variants in the GUI, or can be applied to result SQLite files on the command line.\nTo export your filters, click on the save icon in the bottom right:\n A modal box will pop up and ask you to name your filter set:\n\nWhen you click OK, the filter will be saved on the top right:\n\nFinally, you can click on the download button for the individual filter to save it to disk:\n\nHere’s an example of what a filter looks like in the JSON format:\n{\n  \"sample\": {\n    \"require\": [],\n    \"reject\": []\n  },\n  \"genes\": [],\n  \"variant\": {\n    \"operator\": \"and\",\n    \"rules\": [\n      {\n        \"operator\": \"and\",\n        \"rules\": [\n          {\n            \"column\": \"clinvar__sig\",\n            \"test\": \"hasData\",\n            \"value\": null,\n            \"negate\": false\n          },\n          {\n            \"column\": \"clingen__disease\",\n            \"test\": \"hasData\",\n            \"value\": null,\n            \"negate\": false\n          }\n        ],\n        \"negate\": false\n      }\n    ],\n    \"negate\": false\n  },\n  \"smartfilter\": {},\n  \"samplefilter\": {\n    \"operator\": \"and\",\n    \"rules\": [],\n    \"negate\": false\n  }\n}",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#applying-json-filters-in-the-gui",
    "href": "filtering.html#applying-json-filters-in-the-gui",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.7 Applying JSON Filters in the GUI",
    "text": "5.7 Applying JSON Filters in the GUI\nJSON filters can be applied by clicking on the upload icon:\n\nA file select box will pop up and you can select the JSON filter to load it:\n\nThen you can hit Apply Filter as usual to apply it.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#applying-json-filters-on-the-command-line",
    "href": "filtering.html#applying-json-filters-on-the-command-line",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.8 Applying JSON Filters on the Command Line",
    "text": "5.8 Applying JSON Filters on the Command Line\nJSON filters can also be applied on the command-line using the oc util filtersqlite command. More information is here.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#annotator-module-build-process",
    "href": "making_annotator_modules.html#annotator-module-build-process",
    "title": "4  Making an Annotator Module",
    "section": "4.2 Annotator Module Build Process",
    "text": "4.2 Annotator Module Build Process\nClick on each box in the flowchart below to jump to that part of the build process.\n\n\n\n\n\nflowchart TD\n  A[Initialize Module] --&gt; B\n  click A \"#initializing-an-annotator-module\"\n  B[Load Annotation\\ninto Database] --&gt; C\n  click B \"#loading-annotations-as-a-sqlite-file\"\n  C[Map Annotations\\nin Python] --&gt;  D\n  click C \"#mapping-our-annotator-file\"\n  D[Customize Output/\\nDisplay] \n\n\n\n\n\n\nCreating an annotator module requires the following:\n\nInitializing an new annotator skeleton using oc new annotator &lt;modulename&gt;\nLoading an annotator file into a SQLite database (&lt;modulename&gt;.sqlitess) using sqlite3\nMapping the annotator sqlite file in the &lt;modulename&gt;.py file\nCustomizing the output using the &lt;modulename&gt;.yml file\n\n\n4.2.1 Anatomy of an annotator module\nThis is a quick review of the basic structure of an annotator module.\n\n\n\n\n\nflowchart LR\n  A[oc new annotator sift] --&gt; B\n  B[\"sift.py\\n(queries data file)\"]\n  A --&gt; C[\"sift.yml\\n(Maps variants to annotation)\"]\n  A --&gt; D[\"data/sift.sqlite\\n(contains annotation table)\"]\n\n\n\n\n\n\n/Users/Shared/open-cravat/modules/annotators/sift\n├── data\n│   └── sift.sqlite               ## contains annotations in sqlite format\n├── sift.md                       ## describes how to use annotator\n├── sift.py                       ## maps annotation columns to variant input\n└── sift.yml                      ## configures output columns\n\n3 directories, 5 files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  },
  {
    "objectID": "filtering.html#learning-objectives",
    "href": "filtering.html#learning-objectives",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.2 Learning Objectives",
    "text": "5.2 Learning Objectives\n\n\n\n\n\nflowchart TD\n  A[\"Results Viewer\"] --&gt; B\n  B[\"Build Filter in GUI\"] \n  B --&gt; F[\"Explore Filtered Data\"]\n  F --&gt; G[\"Save JSON filter\"]\n  G --&gt; D[\"Apply filter to New Set\"]\n  G --&gt; E[\"Apply Filter on CLI\"]\n\n\n\n\n\n\nAfter reading this vignette, you should be able to:\n\nExplain how to build simple filters using the OpenCRAVAT GUI\nCompose multiple filters using boolean logic to make complex filtering\nSave your filter and export it as a JSON file\nApply your filter to a new set of variants",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "filtering.html#what-you-learned",
    "href": "filtering.html#what-you-learned",
    "title": "5  Filtering in OpenCRAVAT",
    "section": "5.9 What You Learned",
    "text": "5.9 What You Learned\n\nExplain how to build simple filters using the OpenCRAVAT GUI\nCompose multiple filters using boolean logic to make complex filtering\nSave your filter and export it as a JSON file\nApply your filter to a new set of variants",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Filtering in OpenCRAVAT</span>"
    ]
  },
  {
    "objectID": "making_annotator_modules.html#what-you-learned",
    "href": "making_annotator_modules.html#what-you-learned",
    "title": "4  Making an Annotator Module",
    "section": "4.8 What you learned",
    "text": "4.8 What you learned\nYou learned the basic annotator module development process, including.\n\nInitializing an new annotator skeleton using oc new annotator &lt;modulename&gt;\nLoading an annotator file into a SQLite database (&lt;modulename&gt;.sqlitess) using sqlite3\nMapping the annotator sqlite file in the &lt;modulename&gt;.py file\nCustomizing the output using the &lt;modulename&gt;.yml file",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Making an Annotator Module</span>"
    ]
  }
]